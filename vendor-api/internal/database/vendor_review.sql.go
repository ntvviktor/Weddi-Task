// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: vendor_review.sql

package database

import (
	"context"
)

const createVendorReview = `-- name: CreateVendorReview :exec
INSERT INTO vendor_review(review_id, vendor_id, vendor_name, poster, date, rating, source, content, link_to_source)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateVendorReviewParams struct {
	ReviewID     string
	VendorID     string
	VendorName   string
	Poster       string
	Date         string
	Rating       int32
	Source       string
	Content      string
	LinkToSource string
}

func (q *Queries) CreateVendorReview(ctx context.Context, arg CreateVendorReviewParams) error {
	_, err := q.db.ExecContext(ctx, createVendorReview,
		arg.ReviewID,
		arg.VendorID,
		arg.VendorName,
		arg.Poster,
		arg.Date,
		arg.Rating,
		arg.Source,
		arg.Content,
		arg.LinkToSource,
	)
	return err
}

const deleteVendorReviewByReviewId = `-- name: DeleteVendorReviewByReviewId :exec
DELETE FROM vendor_review WHERE review_id = ?
`

func (q *Queries) DeleteVendorReviewByReviewId(ctx context.Context, reviewID string) error {
	_, err := q.db.ExecContext(ctx, deleteVendorReviewByReviewId, reviewID)
	return err
}

const getAllVendorReviews = `-- name: GetAllVendorReviews :many
SELECT review_id, vendor_id, vendor_name, poster, date, rating, source, content, link_to_source FROM vendor_review
`

func (q *Queries) GetAllVendorReviews(ctx context.Context) ([]VendorReview, error) {
	rows, err := q.db.QueryContext(ctx, getAllVendorReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VendorReview
	for rows.Next() {
		var i VendorReview
		if err := rows.Scan(
			&i.ReviewID,
			&i.VendorID,
			&i.VendorName,
			&i.Poster,
			&i.Date,
			&i.Rating,
			&i.Source,
			&i.Content,
			&i.LinkToSource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVendorReviewByReviewId = `-- name: GetVendorReviewByReviewId :one
SELECT review_id, vendor_id, vendor_name, poster, date, rating, source, content, link_to_source FROM vendor_review WHERE review_id = ? LIMIT 1
`

func (q *Queries) GetVendorReviewByReviewId(ctx context.Context, reviewID string) (VendorReview, error) {
	row := q.db.QueryRowContext(ctx, getVendorReviewByReviewId, reviewID)
	var i VendorReview
	err := row.Scan(
		&i.ReviewID,
		&i.VendorID,
		&i.VendorName,
		&i.Poster,
		&i.Date,
		&i.Rating,
		&i.Source,
		&i.Content,
		&i.LinkToSource,
	)
	return i, err
}

const getVendorReviewByVendorId = `-- name: GetVendorReviewByVendorId :many
SELECT review_id, vendor_id, vendor_name, poster, date, rating, source, content, link_to_source FROM vendor_review WHERE vendor_id = ?
`

func (q *Queries) GetVendorReviewByVendorId(ctx context.Context, vendorID string) ([]VendorReview, error) {
	rows, err := q.db.QueryContext(ctx, getVendorReviewByVendorId, vendorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VendorReview
	for rows.Next() {
		var i VendorReview
		if err := rows.Scan(
			&i.ReviewID,
			&i.VendorID,
			&i.VendorName,
			&i.Poster,
			&i.Date,
			&i.Rating,
			&i.Source,
			&i.Content,
			&i.LinkToSource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVendorReview = `-- name: UpdateVendorReview :exec
UPDATE vendor_review
SET vendor_name = ?,
poster = ?,
date = ?,
rating = ?,
source = ?, 
content = ?,
link_to_source = ?
WHERE review_id = ?
`

type UpdateVendorReviewParams struct {
	VendorName   string
	Poster       string
	Date         string
	Rating       int32
	Source       string
	Content      string
	LinkToSource string
	ReviewID     string
}

func (q *Queries) UpdateVendorReview(ctx context.Context, arg UpdateVendorReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateVendorReview,
		arg.VendorName,
		arg.Poster,
		arg.Date,
		arg.Rating,
		arg.Source,
		arg.Content,
		arg.LinkToSource,
		arg.ReviewID,
	)
	return err
}
